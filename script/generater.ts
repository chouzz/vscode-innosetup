import {
    XMLParser,
    XMLBuilder,
    XmlBuilderOptionsOptional,
} from 'fast-xml-parser';
import * as fs from 'fs';
import * as path from 'path';

export function generate(filePath: string) {
    const parseOptions = {
        ignoreAttributes: false,
        attributeNamePrefix: '',
    };
    const parser = new XMLParser(parseOptions);
    const obj = parser.parse(fs.readFileSync(filePath, { encoding: 'utf8' }));
    const buildOptions = {
        ignoreAttributes: false,
        //attributeValueProcessor: ()
    };
    obj.ishelp.topic?.forEach((element) => {
        // match section group
        // match constant group
        if (element.title === 'Constants') {
            let res = new Map<string, string>();
            const mergeMap = (
                map1: Map<string, string>,
                map2: Map<string, string>,
            ) => {
                return new Map([...map1.entries(), ...map2.entries()]);
            };
            element.body.dl.forEach((el) => {
                res = mergeMap(extractConstant(el, buildOptions), res);
            });
        }
    });
    console.log(obj);
}
function writeToFile(fileName: string, value: Map<string, string>) {
    const headers =
        '// This file is generated from npm run generate.  Do not edit this file directly. ';
    const strings = headers + '\n' + JSON.stringify(value);
    fs.writeFile(path.join(__dirname, fileName), strings, (error) => {
        if (error) {
            console.error(error.message);
        }
    });
}
function extractConstant(
    content: any,
    buildOptions: XmlBuilderOptionsOptional,
) {
    const res = new Map<string, string>();
    const len = content.dd.length;
    for (let i = 0; i < len; i++) {
        const xmlDescription = content.dd[i];
        const builder = new XMLBuilder(buildOptions);
        const descrip = builder.build(xmlDescription);
        try {
            const keyword = content.dt[i].b;
            if (Array.isArray(keyword)) {
                keyword.forEach((el) => res.set(el.a.name, descrip));
            }
            if (keyword.a.name && descrip) {
                res.set(keyword.a.name, descrip);
            }
        } catch (error) {
            console.log(error);
        }
    }
    return res;
}

function test() {
    const string = `<dt><b><a name="name">{%<i>NAME</i>|<i>DefaultValue</i>}</a></b></dt>
<dd>
<p>Embeds the value of an environment variable.</p>
<ul>
<li><i>NAME</i> specifies the name of the environment variable to use.</li>
<li><i>DefaultValue</i> determines the string to embed if the specified variable does not exist on the user's system.</li>
<li>If you wish to include a comma, vertical bar ("|"), or closing brace ("}") inside the constant, you must escape it via "%-encoding." Replace the character with a "%" character, followed by its two-digit hex code. A comma is "%2c", a vertical bar is "%7c", and a closing brace is "%7d". If you want to include an actual "%" character, use "%25".</li>
<li><i>NAME</i> and <i>DefaultValue</i> may include constants. Note that you do <i>not</i> need to escape the closing brace of a constant as described above; that is only necessary when the closing brace is used elsewhere.</li>
</ul>
<examples>
<pre>
{%COMSPEC}
{%PROMPT|$P$G}
</pre>
</examples>
</dd>`;

    const parseOptions = {
        ignoreAttributes: false,
    };
    const parser = new XMLParser(parseOptions);
    const obj = parser.parse(string);
    console.log(obj);
}
test();
// TODO: Automatically download isetup.xml file from https://github.com/jrsoftware/issrc/blob/main/ISHelp/isetup.xml
generate(path.join(__dirname, '../isetup.xml'));
